/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2020-11-05 01:14:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.rest;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class restMap_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    <style>\r\n");
      out.write("\t    .label {margin-bottom: 96px;}\r\n");
      out.write("\t\t.label * {display: inline-block;vertical-align: top;}\r\n");
      out.write("\t\t.label .left {background: url(\"https://t1.daumcdn.net/localimg/localimages/07/2011/map/storeview/tip_l.png\") no-repeat;display: inline-block;height: 24px;overflow: hidden;vertical-align: top;width: 7px;}\r\n");
      out.write("\t\t.label .center {background: url(https://t1.daumcdn.net/localimg/localimages/07/2011/map/storeview/tip_bg.png) repeat-x;display: inline-block;height: 24px;font-size: 12px;line-height: 24px;}\r\n");
      out.write("\t\t.label .right {background: url(\"https://t1.daumcdn.net/localimg/localimages/07/2011/map/storeview/tip_r.png\") -1px 0  no-repeat;display: inline-block;height: 24px;overflow: hidden;width: 6px;}\r\n");
      out.write("    </style>\r\n");
      out.write("    \r\n");
      out.write("<div id=\"sectionContainerCenter\">\r\n");
      out.write("\t<div id=\"mapContainer\" style=\"width:100%; height:100%;\"></div>\r\n");
      out.write("\t\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=1ab3d71d45b40c5eaec83805c9a73569\"></script>\r\n");
      out.write("\t<script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\r\n");
      out.write("\t<script>\t\t\r\n");
      out.write("\t\r\n");
      out.write("\tconst options = { //지도를 생성할 때 필요한 기본 옵션\r\n");
      out.write("\t\t\tcenter: new kakao.maps.LatLng(35.958437, 128.486084), //지도의 중심좌표.\r\n");
      out.write("\t\t\tlevel: 5 //지도의 레벨(확대, 축소 정도)\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\tconst map = new kakao.maps.Map(mapContainer, options);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction getRestaurantList() {\r\n");
      out.write("\t\t\tconst bounds = map.getBounds()\r\n");
      out.write("\t\t\tconst southWest = bounds.getSouthWest()\r\n");
      out.write("\t\t\tconst northEast = bounds.getNorthEast()\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tconsole.log('southWest:' + southWest)\r\n");
      out.write("\t\t\tconsole.log('northEast:' + northEast)\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tconst sw_lat = southWest.getLat()\r\n");
      out.write("\t\t\tconst sw_lng = southWest.getLng()\r\n");
      out.write("\t\t\tconst ne_lat = northEast.getLat()\r\n");
      out.write("\t\t\tconst ne_lng = northEast.getLng()\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\taxios.get('/rest/ajaxGetList', {\r\n");
      out.write("\t\t\t\tparams: {\r\n");
      out.write("\t\t\t\t\tsw_lat, sw_lng, ne_lat, ne_lng\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}).then(function(res) {\r\n");
      out.write("\t\t\t\tconsole.log(res.data)\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tres.data.forEach(function(item) {\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tcreateMarker(item)\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t\t})\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tkakao.maps.event.addListener(map, 'dragend', getRestaurantList)   \r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//마커생성\r\n");
      out.write("\t\tfunction createMarker(item) {\t\t\t\r\n");
      out.write("\t\t\tvar content = document.createElement('div')\r\n");
      out.write("\t\t\tcontent.className = 'label'\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar leftSpan = document.createElement('span')\r\n");
      out.write("\t\t\tleftSpan.className = 'left'\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar rightSpan = document.createElement('span')\r\n");
      out.write("\t\t\trightSpan.className = 'right'\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar centerSpan = document.createElement('span')\r\n");
      out.write("\t\t\tcenterSpan.className = 'center'\r\n");
      out.write("\t\t\tcenterSpan.innerText = item.nm\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tcontent.appendChild(leftSpan)\r\n");
      out.write("\t\t\tcontent.appendChild(centerSpan)\r\n");
      out.write("\t\t\tcontent.appendChild(rightSpan)\t\t\t\r\n");
      out.write("\t\t\t//var content = `<div class =\"label\"><span class=\"left\"></span><span class=\"center\">${item.nm}</span><span class=\"right\"></span></div>`\r\n");
      out.write("\t\t\tvar mPos = new kakao.maps.LatLng(item.lat, item.lng)\t\t\t\r\n");
      out.write("\t\t\tvar marker = new kakao.maps.CustomOverlay({\r\n");
      out.write("\t\t\t    position: mPos,\r\n");
      out.write("\t\t\t    content: content\r\n");
      out.write("\t\t\t});\t\t\t\r\n");
      out.write("\t\t\taddEvent(content, 'click', function() {\r\n");
      out.write("\t\t\t\tconsole.log('마커 클릭: ' + item.i_rest)\r\n");
      out.write("\t\t\t\tmoveToDetail(item.i_rest)\r\n");
      out.write("\t\t\t})\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tmarker.setMap(map)\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction moveToDetail(i_rest) {\r\n");
      out.write("\t\t\tlocation.href = '/rest/detail?i_rest=' + i_rest\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction addEvent(target, type, callback) {\r\n");
      out.write("\t\t\t if (target.addEventListener) {\r\n");
      out.write("\t\t\t    target.addEventListener(type, callback);\r\n");
      out.write("\t\t    } else {\r\n");
      out.write("\t\t        target.attachEvent('on' + type, callback);\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// check for Geolocation support\r\n");
      out.write("\t\tif (navigator.geolocation) {\r\n");
      out.write("\t\t  console.log('Geolocation is supported!');\r\n");
      out.write("\t\t  \r\n");
      out.write("\t\t  var startPos;\t\t  \r\n");
      out.write("\t\t  navigator.geolocation.getCurrentPosition(function(pos) {\t\t\r\n");
      out.write("\t\t\t  \tstartPos = pos\t\t\t  \r\n");
      out.write("\t\t\t    console.log('lat : ' + startPos.coords.latitude)\r\n");
      out.write("\t\t\t    console.log('lng : ' + startPos.coords.longitude)\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t    if(map) {\r\n");
      out.write("\t\t\t\t    var moveLatLon = new kakao.maps.LatLng(startPos.coords.latitude, startPos.coords.longitude)\r\n");
      out.write("\t\t\t\t    map.panTo(moveLatLon)\t\t\t    \t\r\n");
      out.write("\t\t\t    }\r\n");
      out.write("\t\t  });\r\n");
      out.write("\t\t  \r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t  console.log('Geolocation is not supported for this Browser/OS.');\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
